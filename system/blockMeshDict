/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;
x0    0;
y0    0;
L     2;
b     0.5;
H     0.5;
a     0.2;

x1    1.5;
x2    2.0;
y1    0.5;
y2    1.0;


vertices
(
    ($x0 $y0 0) //    0
    ($x1 $y0 0) //    1
    ($x2 $y0 0) //   2
    ($x2 $y1 0) //    3
    ($x1 $y1 0) //    4
    ($x1 $y2 0) //    5
    ($x0 $y2 0) //    6
    ($x0 $y1 0) //    7

    ($x0 $y0 0.1) //    8
    ($x1 $y0 0.1) //    9
    ($x2 $y0 0.1) //   10
    ($x2 $y1 0.1) //    11
    ($x1 $y1 0.1) //    12
    ($x1 $y2 0.1) //    13
    ($x0 $y2 0.1) //    14
    ($x0 $y1 0.1) //    15
);

blocks
(
    hex (0 1 4 7 8 9 12 15) (20 20 1) simpleGrading (1 1 1)
    hex (1 2 3 4 9 10 11 12) (10 20 1) simpleGrading (1 1 1)
    hex (7 4 5 6 15 12 13 14) (20 20 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    movingWall
    {
        type wall;
        faces
        (
            (5 4 12 13)
        );
    }

    movingLowerWall
    {
        type wall;
        faces
        (
            (4 3 11 12)
        );
    }

    topField
    {
        type patch;
        faces
        (
            (6 5 13 14)
        );
    }

    bottomWallLeft
    {
        type patch;
        faces
        (
            (0 8 9 1)
        );
    }

    bottomWallRight
    {
        type patch;
        faces
        (
            (1 9 10 2)
        );
    }

    rightWall
    {
        type wall;
        faces
        (
            (3 2 10 11)
        );
    }
    leftWall
    {
        type wall;
        faces
        (
            (7 15 8 0)
            (7 6 14 15)
        );
    }
    front
    {
        type empty;
        faces
        (
            (0 1 4 7 )
            (7 4 5 6)
            (1 2 3 4)
        );
    }
    back
    {
        type empty;
        faces
        (
            (8 15 12 9)
            (15 14 13 12)
            (9 12 11 10)

        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
